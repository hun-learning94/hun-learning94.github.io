<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clustering on Hun Learning</title>
    <link>/tags/clustering/</link>
    <description>Recent content in Clustering on Hun Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Aug 2020 10:00:00 +0900</lastBuildDate><atom:link href="/tags/clustering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variational Inference and Bayesian Gaussian Mixture Model</title>
      <link>/posts/2020-08-25-variational-inference/</link>
      <pubDate>Tue, 25 Aug 2020 10:00:00 +0900</pubDate>
      
      <guid>/posts/2020-08-25-variational-inference/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EM Algorithm for Latent Variable Models</title>
      <link>/posts/bayesian-ml/week5/03-em-algorithm-for-latent-variable-models/</link>
      <pubDate>Mon, 10 Aug 2020 10:00:00 +0900</pubDate>
      
      <guid>/posts/bayesian-ml/week5/03-em-algorithm-for-latent-variable-models/</guid>
      <description>For an observed data $\mathbf{x}$, we might posit the existence of an unobserved data $\mathbf{z}$ and include it in model $p(\mathbf{x,z}\mid \theta)$. This is called a latent variable model. The question is, why bother? It turns out that in many cases, learning $\theta$ with the marginal log likelihood $p(\mathbf{x}\mid \theta)$ is hard, whereas learning with the joint likelihood with a complete data set $p(\mathbf{x,z}\mid \theta)$ is relatively easy. GMM is one such case.</description>
    </item>
    
    <item>
      <title>Mixtures of Gaussians and EM algorithm</title>
      <link>/posts/bayesian-ml/week5/02-mixtures-of-gaussians-and-em/</link>
      <pubDate>Mon, 10 Aug 2020 07:00:00 +0900</pubDate>
      
      <guid>/posts/bayesian-ml/week5/02-mixtures-of-gaussians-and-em/</guid>
      <description>Mixtures of Gaussians (GMM) GMM as a joint distribution Suppose a random vector $\mathbf{x}$ follows a $K$ Gaussian mixture distribution,
$$ p(\mathbf{x}) = \sum_{k=1}^K \pi_k N(\mathbf{x}\mid \boldsymbol{\mu_k, \Sigma_k}) $$ Knowing the distribution means we have complete information about the set of parameters $\pi_k, \boldsymbol{\mu_k, \Sigma_k}$ for all $k$. Let us say that the parameter $\pi_k$ is shrouded, and instead we have a random variable $\mathbf{z}$ with $1-to-K$ coding where exactly one of $K$ elements (say $z_k$) be $1$ while all else are $0$.</description>
    </item>
    
    <item>
      <title>K-means clustering</title>
      <link>/posts/bayesian-ml/week5/01-k-means-clustering/</link>
      <pubDate>Mon, 10 Aug 2020 06:00:00 +0900</pubDate>
      
      <guid>/posts/bayesian-ml/week5/01-k-means-clustering/</guid>
      <description>Gaussian mixture model is a widely used probabilistic model. For inference (model learning), we may use either EM algorithm which is a MLE approach or use Bayesian approach, which leads to variational inference. We would study this topic next week. For now, let us introduce one of the well-known nonparameteric methods for unsupervised learning, and introduce Gaussian mixture as a parametric counterpart.
K-means clustering Let us suppose that we know the total number of clusters is fixed as $K$.</description>
    </item>
    
  </channel>
</rss>
